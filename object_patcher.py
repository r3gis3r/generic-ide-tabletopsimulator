import argparse
import asyncio
import glob
import logging
import os

from tts_client.tts_protocol import tts_push_object


def _get_argparser():
    parser = argparse.ArgumentParser(description="Tabletop Simulator Dev server")
    parser.add_argument(
        "--output-dir",
        type=str,
        help="The output path for autogenerated files what will be consumed when sending files",
    )
    parser.add_argument(
        "--file",
        type=str,
        help="File push",
        required=False,
    )
    parser.add_argument("--object", type=str, help="Object guid", required=True)
    parser.add_argument(
        "--libdir", help="Path to search for ttslua libs", action="append"
    )

    parser.add_argument(
        "-v", "--verbose", help="increase output verbosity", action="store_true"
    )
    return parser


if __name__ == "__main__":
    parser = _get_argparser()
    args = parser.parse_args()
    logging.basicConfig(level=logging.DEBUG if args.verbose else logging.INFO)

    # snippet = args.selected_text
    file_path = args.file
    if not file_path and "tags:" not in args.object:
        search_pattern = os.path.join(args.output_dir, f"*-{args.object}.ttslua")
        candidates = glob.glob(search_pattern)
        if candidates:
            file_path = candidates[0]
            print(file_path)
    if not file_path:
        raise ValueError("File path not found")
    asyncio.run(
        tts_push_object(
            file_path=file_path,
            object=args.object,
            export_dir=args.output_dir,
            lib_dirs=args.libdir,
        )
    )
